#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".
GIT_ROOT=`git rev-parse --show-superproject-working-tree --show-toplevel | head -1`
HOOK_NAME=`basename $0`
LOCAL_HOOK="${GIT_ROOT}/.git/hooks/${HOOK_NAME}"

if [ -e $LOCAL_HOOK ]; then
  source $LOCAL_HOOK
fi

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

branch=`git symbolic-ref HEAD --short`
if [ ${branch} = master ]; then
	cat <<\EOF
	エラー：masterブランチにcommitはできません。
EOF
	exit 1
fi

# https://qiita.com/k0kubun/items/8f6d7eded1d833187449
if git-rev-parse --verify HEAD >/dev/null 2>&1; then
  against=HEAD
else
  # Initial commit: diff against an empty tree object
  against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

for diff in $(git diff-index --check --cached $against -- |
  grep 'trailing whitespace' | sed 's/: trailing whitespace.//'); do
  file=$(echo "$diff" | sed 's/:[^:]*$//')
  line=$(echo "$diff" | sed 's/^[^:]*://')

  sed -i '' -e "$line"'s/ *$//' "$file"
  git add "$file"
done

# Testファイル以外でconsole.logやprint関数が混入していないかチェックする
# https://gist.github.com/guilherme/9604324
# https://qiita.com/myblackcat7112/items/5e8205f1b5161a1f8590
console='console.log'
println='println'
# CHECK
files=`git status|grep -e "modified" -e "new file"|sed "s/new file:\(.*\)/\1/g"|sed "s/modified:\(.*\)/\1/g"|cut -f 2`
for file in $files
do
    echo name:$file;

    # Test用以外のファイルを対象とする
    if [ ! "`echo $file | grep 'Test'`" ]; then
       echo check... $console, $println in $file;
        result=`less $file | grep -e "$console" -e "$println"`;

        if [ -z $result ]; then
            echo "デバッグコードは含まれていませんでした。\n";
        else
            echo $result;
            echo '[warn] デバッグコードが混入していますが、問題ないですか? [y/N]'

            exec < /dev/tty
            read answer

            case $answer in
							[Yy])
								echo 'デバッグコードを無視しました。'
								;;
              [Nn])
								echo 'コミットしませんでした。'
								exit 1;;
							*)
								echo 'y/n以外が入力されたため、コミットしませんでした。'
								exit 1;;
            esac
            git add $file;
            echo $file;
        fi
    fi
done


# チェックリストを表示させる
echo "チェックリストを確認しましたか? (y/n): "
exec < /dev/tty
read str

case "$str" in
	[Yy]*)
		echo "チェックしました。"
		;;
	[Nn]|"")
		echo "再度チェックリストを確認してください。"
		open -a "Google Chrome" https://www.notion.so/975d1ec2497743b3a1a5dd70fbcdca11
		exit 1
		;;
	*)
		echo "undefined"
		exit 1
		;;
esac

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --
